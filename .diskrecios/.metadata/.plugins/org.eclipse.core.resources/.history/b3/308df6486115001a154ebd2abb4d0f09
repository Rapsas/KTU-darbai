package ShortestPath;

import java.util.*;

public class Graph {
	private int V; //Number of vertices
	
	//Arrays for the algorithm
	private LinkedList<Integer> adj[];
	private LinkedList<Integer> weight[];
	private LinkedList<Integer> prec;
	private LinkedList<Integer> dist;
	
	public Graph(int v) {
		V = v ;
		adj = new LinkedList[v];
		weight = new LinkedList[v];
		prec = new LinkedList();
		dist = new LinkedList();
		for (int i = 0; i < v; i++) {
			prec.add(0);
			dist.add(Integer.MAX_VALUE);
			adj[i] = new LinkedList();
			weight[i] = new LinkedList();
		}
	}
	
	//Function to add an edge into the graph 
	void addEdge(int v, int w, int weigth) {
		int vAsIndex = v - 1;
		int wAsIndex = w - 1;
		adj[vAsIndex].add(wAsIndex);  // Add w to v's list. 
        adj[wAsIndex].add(vAsIndex);
        weight[vAsIndex].add(weigth);
        weight[wAsIndex].add(weigth);
	}
	
	LinkedList<Integer> getPrec() {
		return prec;
	}
	
	//Function for finding the shortest path from the given vertix
	boolean FindPaths(int v) {
		prec.set(v - 1, v - 1);
		dist.set(v, 0);
		
		for	(int i = 1; i < V; i++) {
			for (int vertix = 0; vertix < V; vertix++) {
				int index = 0;
				for (int u : adj[vertix]) {
					if(dist.get(u) > dist.get(vertix) + weight[vertix].get(index)) {
						dist.set(u, dist.get(vertix) + weight[vertix].get(index));
						prec.set(u, vertix);
					}
					index++;
				}
			}
		}
		
		for (int vertix = 0; vertix < V; vertix++) {
			for (int u : adj[vertix]) {
				if(dist.get(u) > dist.get(vertix) + weight[vertix].get(u)) {
					System.out.println("Ciklas su neigiamu suminiu svoriu");
					return false;
				}
			}
		}
		return true;
	}
	
	public void test() {
		for (int u : adj[0]) {
			System.out.print(u + " ");
		}
	}
	
	public static void main(String args[]) {
		Graph g = new Graph(6);
		g.addEdge(1, 2, 1);
		g.addEdge(1, 4, 4);
		g.addEdge(1, 6, 2);
		g.addEdge(1, 3, 1);
		g.addEdge(2, 4, 1);
		g.addEdge(2, 5, 7);
		g.addEdge(3, 4, 3);
		g.addEdge(3, 5, 4);
		g.addEdge(6, 4, 2);
		g.FindPaths(5);
		for (int i = 0; i < g.getPrec().size(); i++) {
			System.out.print(g.getPrec().get(i) + " ");
		}
		
		//g.test();
	}
}
