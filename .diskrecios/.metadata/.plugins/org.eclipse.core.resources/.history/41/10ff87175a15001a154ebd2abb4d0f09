package ShortestPath;

import java.util.*;

public class Graph {
	private int V; //Number of vertices
	
	//Arrays for the algorithm
	private LinkedList<Integer> adj[];
	private LinkedList<Integer> weight[];
	private int prec[];
	private int dist[];
	
	public Graph(int v) {
		V = v - 1;
		adj = new LinkedList[v];
		weight = new LinkedList[v];
		prec = new int[v];
		dist = new int[v];
		for (int i = 0; i < v; i++) {
			prec[i] = 0;
			dist[i] = Integer.MAX_VALUE;
			adj[i] = new LinkedList();
			weight[i] = new LinkedList();
		}
	}
	
	//Function to add an edge into the graph 
	void addEdge(int v, int w, int weigth) {
		adj[v].add(w);  // Add w to v's list. 
        adj[w].add(v);
        weight[v].add(weigth);
        weight[w].add(weigth);
	}
	
	int[] getPrec() {
		return prec;
	}
	
	//Function for finding the shortest path from the given vertix
	boolean FindPaths(int v) {
		prec[v] = v;
		dist[v] = 0;
		
		for	(int i = 1; i < V; i++) {
			for (int vertix = 0; vertix < V; vertix++) {
				for (int u : adj[vertix]) {
					if(dist[u] > dist[vertix] + weight[vertix].get(u)) {
						dist[u] = dist[vertix] + weight[vertix].get(u);
						prec[u] = vertix;
					}
				}
			}
		}
		
		for (int vertix = 0; vertix < V; vertix++) {
			for (int u : adj[vertix]) {
				if(dist[u] > dist[vertix] + weight[vertix].get(u)) {
					System.out.println("Ciklas su neigiamu suminiu svoriu");
					return false;
				}
			}
		}
		return true;
	}
	
	public static void main(String args[]) {
		Graph g = new Graph(7);
		g.addEdge(1, 2, 1);
		g.addEdge(1, 4, 4);
		g.addEdge(1, 6, -2);
		g.addEdge(1, 3, -1);
		g.addEdge(2, 4, 1);
		g.addEdge(2, 5, 7);
		g.addEdge(3, 4, 3);
		g.addEdge(3, 5, -4);
		g.addEdge(6, 4, 2);
		g.FindPaths(5);
		for (int i = 0; i < g.getPrec().length; i++) {
			System.out.print(g.getPrec()[i] + " ");
		}
	}
}
